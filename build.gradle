buildscript {
    ext {
        springBootVersion = '1.2.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath("io.spring.gradle:dependency-management-plugin:0.4.1.RELEASE")
        classpath("org.springframework:springloaded:1.2.0.RELEASE")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

group = 'javajudd'

apply plugin: 'java'
//apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'idea' 
apply plugin: 'spring-boot'
apply plugin: 'docker'

jar {
    baseName = 'portero'
    version = '0.0.1-SNAPSHOT'
    archiveName = 'portero.jar'
}

//war {
//    baseName = 'portero'
//}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-web")

//    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")

    runtime("com.h2database:h2")

    testCompile("org.springframework.boot:spring-boot-starter-test") 
}


eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file ("$buildDir/classes/main/")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

task docker(type: Docker, dependsOn: build) {
    push = true
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}